{"version":3,"sources":["Header.js","Form.js","Generator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Form","props","onSubmit","generateMeme","type","name","placeholder","value","data","topText","onChange","handleChange","bottomText","randomImage","Generator","state","allMemeImgs","bind","fetch","then","response","json","memes","setState","event","target","this","e","preventDefault","imageNum","Math","floor","random","length","pic","url","React","Component","App","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAiBeA,MAdf,WACI,OACI,gCACI,yBAAKC,UAAU,WACX,yBACIC,IAAI,6DACJC,IAAI,aAER,kD,uDCmCDC,MA3Cf,SAAcC,GACV,OACI,yBAAKJ,UAAU,aAEX,yBAAKA,UAAU,YACX,0BAAMA,UAAU,YAAYK,SAAUD,EAAME,cACxC,2BACIC,KAAK,OACLC,KAAK,UACLC,YAAY,iBACZC,MAAON,EAAMO,KAAKC,QAClBC,SAAUT,EAAMU,eAEpB,2BACIP,KAAK,OACLC,KAAK,aACLC,YAAY,oBACZC,MAAON,EAAMO,KAAKI,WAClBF,SAAUT,EAAMU,eAGpB,8CAIR,yBAAKd,UAAU,YACX,yBAAKA,UAAU,QACX,yBAAKC,IAAKG,EAAMO,KAAKK,YAAad,IAAI,KAGtC,uBAAGF,UAAU,OACmB,KAA3BI,EAAMO,KAAKK,aAAsBZ,EAAMO,KAAKC,SAEjD,uBAAGZ,UAAU,UACmB,KAA3BI,EAAMO,KAAKK,YAAqB,GAAKZ,EAAMO,KAAKI,gBCiB1DE,E,YAjDX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTN,QAAS,GACTG,WAAY,GACZC,YAAa,GACbG,YAAa,IAEjB,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBACpB,EAAKd,aAAe,EAAKA,aAAac,KAAlB,gBATV,E,iFAYO,IAAD,OAChBC,MAAM,qCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAIxBF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASZ,KAAlBc,MACP,EAAKC,SAAS,CAACP,YAAaM,S,mCAI3BE,GAAQ,IAAD,EACMA,EAAMC,OAArBpB,EADS,EACTA,KAAME,EADG,EACHA,MACbmB,KAAKH,SAAL,eAAgBlB,EAAOE,M,mCAGdoB,GACTA,EAAEC,iBACF,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,SAAWN,KAAKX,MAAMC,YAAYiB,QAC7DC,EAAMR,KAAKX,MAAMC,YAAYa,GAAUM,IAC3CT,KAAKH,SAAS,CAACV,YAAaqB,M,+BAK5B,OACI,kBAAC,EAAD,CACIvB,aAAgBe,KAAKf,aACrBR,aAAgBuB,KAAKvB,aACrBK,KAAQkB,KAAKX,Y,GA5CLqB,IAAMC,W,MCWfC,MATf,WACE,OACE,yBAAKC,MAAM,WACT,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.b2aeecc0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return(\r\n        <header>\r\n            <div className=\"flexbox\">\r\n                <img \r\n                    src=\"http://pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n                    alt=\"Problem?\"\r\n                />\r\n                <div>Meme Generator</div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport './Form.css'\r\n\r\nfunction Form(props) {\r\n    return(\r\n        <div className=\"generator\">\r\n\r\n            <div className=\"flex-row\">\r\n                <form className=\"meme-form\" onSubmit={props.generateMeme}>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Enter Top Text\"\r\n                        value={props.data.topText}\r\n                        onChange={props.handleChange}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Enter Bottom Text\"\r\n                        value={props.data.bottomText}\r\n                        onChange={props.handleChange}\r\n                    />\r\n\r\n                    <button>Generate</button>\r\n                </form>\r\n            </div>\r\n\r\n            <div className=\"flex-row\">\r\n                <div className=\"meme\">\r\n                    <img src={props.data.randomImage} alt=\"\" />\r\n                    {/* Below are two statements that render conditionally and \r\n                    do functionally the same thing but with different operators */}\r\n                    <p className=\"top\">\r\n                        {props.data.randomImage !== \"\" && props.data.topText}\r\n                    </p>\r\n                    <p className=\"bottom\">\r\n                        {props.data.randomImage === \"\" ? \"\" : props.data.bottomText}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\nimport Form from './Form'\r\n\r\nclass Generator extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImage: \"\",\r\n            allMemeImgs: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.generateMeme = this.generateMeme.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n          .then(response => response.json())\r\n        //   .then(data => {\r\n        //     this.setState({allMemeImgs: data})\r\n        //   })\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({allMemeImgs: memes})\r\n            })\r\n    }\r\n\r\n    handleChange(event) {\r\n        const {name, value} = event.target //pulls the name and value properties of event.target\r\n        this.setState({[name]: value})\r\n    }\r\n\r\n    generateMeme(e) {\r\n        e.preventDefault();\r\n        var imageNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        var pic = this.state.allMemeImgs[imageNum].url\r\n        this.setState({randomImage: pic})\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <Form \r\n                handleChange = {this.handleChange}\r\n                generateMeme = {this.generateMeme}\r\n                data = {this.state}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Generator;","import React from 'react';\nimport Header from './Header';\nimport Generator from './Generator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div class=\"content\">\n      <Header />\n      <Generator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}